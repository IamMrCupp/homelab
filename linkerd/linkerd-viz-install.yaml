---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Grafana RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRT2lQd2dzdGNLZERBMG95bUUvWHl4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVd09UQTRORFV5TVZvWApEVEl5TURVd09UQTRORFV5TVZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS3ROVGxLT1B2M3pFeCszU1JEdXRYdkYKbWNZM2d4SThpcEV0allnRXFIZ1ZFZ1A2MVpEekpTcG4wQ2tBZ2hhczVuQUJRNTJ2Y2RRTXJQTDR1eUR5Q242TgoxYmEyK0NrTS9QOXVSUWFlSzVtRWNSWHExY0Y2WU94a0hEWU4rT2JPWmh3VGtoYWdNSncxZXNnekkxMWxuUmdlCjNwZkdjSldzS3lNcjV0ZmdNR3J5MXI2N3NtQ0xpZUMrdlpHTjdnOUZONzdaSU90amdSL0FNQVVYa1NvM3NBY3IKaFllNWY3d1M2T1d0emdGcktTNTBrdDFERGtnV0ROVkhUc3JIeEtaNmlEY3g5UytaYmgwWUF4MHNEVnpHeXFWRApMaFJpdHlVbUlWck9vNE1XUG5PVjVwVmUvdnVKVjFZTzNWZXZRQTdxMnZGU2ZpSjBFSVMwdUZNOU11UzRtWmtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJTzF0YnY0OEF6dms3cDZYaEdVbWRRMzFEQ3N4QkNVCjFPWi9CNStXTVJwczhnNDR4bVBvOXV2dXkvSUY3OW1idkZpR0ROblkwQTh0Nm9YL1lyRXVFeU5JbHBtVzlpZEMKNDJmNzBTR1NWWXltdXdwL0VTQUR0RWxKTXBJajlwaG1DZUNQbXZsbVk4R1lIc2xHM09udkkvUDZkYitLODJEQwp3RnVmSnZ4ZTBXYWJqOVdjOWhrNmRjVUY5NStRd05SZlBGSzdOZEttYmtUVkpGQ0t2MUxOdnNvWVZjQUhENEN4Ci9ySUFLdkdiMzBtYzBVV2FKeGJKeGZNcldySmRtTUkySy9DNXNZRFFjT2laVkpBeWhkVzl1cHRtSmxPaDhaMkwKbVd5V0NjTkhPWHJ3OUdLRHpMS2szMGNnRWxmS1lQRFpBUEQ2RTlhTXB3d2N5QklYU0dKWG8vMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcTAxT1VvNCsvZk1USDdkSkVPNjFlOFdaeGplREVqeUtrUzJOaUFTb2VCVVNBL3JWCmtQTWxLbWZRS1FDQ0Zxem1jQUZEbmE5eDFBeXM4dmk3SVBJS2ZvM1Z0cmI0S1F6OC8yNUZCcDRybVlSeEZlclYKd1hwZzdHUWNOZzM0NXM1bUhCT1NGcUF3bkRWNnlETWpYV1dkR0I3ZWw4WndsYXdySXl2bTErQXdhdkxXdnJ1eQpZSXVKNEw2OWtZM3VEMFUzdnRrZzYyT0JIOEF3QlJlUktqZXdCeXVGaDdsL3ZCTG81YTNPQVdzcExuU1MzVU1PClNCWU0xVWRPeXNmRXBucUlOekgxTDVsdUhSZ0RIU3dOWE1iS3BVTXVGR0szSlNZaFdzNmpneFkrYzVYbWxWNysKKzRsWFZnN2RWNjlBRHVyYThWSitJblFRaExTNFV6MHk1TGlabVFJREFRQUJBb0lCQVFDZW1xSUU3KzFFNWJWMApMUmg2ay9uMmtsc3hXcDZCMlFvWEp3MGV2ZWxaM1hCanZPL1dHRG4yREU2QVdCY2FkWldhYUtFNU00TDU2WTZNCkhGM3VRQXdWWnE5VVVBNXV1N2JYclRvOXlWN204ZWhlZWFMV1U3Ky92MlViYTA1a0xQLy95T0wvRGV4VUJYUWMKUHJUa3VidDg1TUFGMk5iT3phelhFTVBZWnB1TnVLdmExbkpORHM3TVRYcjVWbE0wZmtRL0Jua1F0THNLcTNPUQpjKzNnUENyd1RsVkVEOGFQdWJyVTlTOFQ4dGNJWGljaG9iNTZILzJsK2R2Z2hCdWJnYytObUpaem80RGhJYmI1CkFmWDZoL3hDelhqemZlUXcxRW5tc05VMkw3YVVMc1Zia296MHJ0KzNtU3pRSDd2MFBPZTVsRVh3UHl6ZThwcUMKamo5ckl6ZHRBb0dCQU5YbGsvVWMyTjFIWVgxSHVZc3lKTnl2YytCMTcySklUalJWZ2hGTUdKUWVubjlVZjdHagpkR05XSUM0c2gvQkIvSENObHdibXh5VVhOZExRQXN1OHpDWURVM1N1cDRyWTdacTJGUjdFL3VXU0FQQWVMcEMrCnlKV0NTa0lNZWJQTCs2UThYWXhMdXdTY2sxYnBkdDVJcE5sRmk5NTFUblYrRzRINUdoYkhEM2VmQW9HQkFNMEYKVjh2bDA1THdhcFR0MzJ1c2RIVHhKcmZ5UlhLVjQ3bHNnNEVmekJ3RENsUDVhZW8vTm5PQ1liV2RBelRDUGNXRgphY1FXdnNlRXVnNWlEcUZGUW5OZUlTYjlaejAzR2ZNSnBBYUdWd2YxU3ZuclNqN3ZINzE5YTBZNTAxaXVsNE84ClBVUVAvRVlpSHVXZDJwSFVBYlBMekNrM0d1MU9rU3hmcVNZNkhFUEhBb0dBYmhzbjl0MUtwVjNCU1lSS2R1VHgKSk1rTWxWY2dTeTk5VW1OUitTVjY0WVNCZ25vMDRYU0t6VGZnaU9SVGRkSUI2TTU2R0F0a0tDdXlnVHFpdGM0UwpLTjg5YnFzWmc5ZjNOOVRUT211ZDZ2OGxqSFY4OHZYQ3UzTytWaEdsOUcva3NiNkJTVjhTZm1VN1Uxb0szcEgyCmlnSEs1bERzZW43WUdpZm96aURhVFhFQ2dZQXpGZU84a0xYWlpVS0pmWVF3UmpaMmRTaGFxV21ZbGJTNm5VbGYKUVZjUW04bFZCMDdXNlkxZDF0MFY3ZHZBcDYzUXE5K2cxcklPOFFtVFQrZXBVNkt0TUlVK08rSWZwTDA0aSt4dApHOGhQMlZVblZQT1pIdWhmeFFLWDZ3eTRpamlDd01MYlZNaGRpVjc5aEFuVVVHbGtMYUhmbXpXQWNCVklZMFc0Cm1yNDBQUUtCZ0JwZVFwRW1JWW1SUDhZWUZxV3paNGtEb2d6N2U1UnV4UDVURFloRURIekF4OXVYS1M3L3dnNmMKSG95QTdQdjAwWXFwY3I5Y3J4WjM4T01ka29HQS9UcUNhNGdyMisvenR4WXFzaEZLTVJFRXJxZkZjY29wT2lySAptcnJIZjJqTzI0TnJheWlacUFpdlVRSkx3YXNiVUh5L05iTzBYYlhUTkdaTExIejNFb1NwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRT2lQd2dzdGNLZERBMG95bUUvWHl4akFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVd09UQTRORFV5TVZvWApEVEl5TURVd09UQTRORFV5TVZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS3ROVGxLT1B2M3pFeCszU1JEdXRYdkYKbWNZM2d4SThpcEV0allnRXFIZ1ZFZ1A2MVpEekpTcG4wQ2tBZ2hhczVuQUJRNTJ2Y2RRTXJQTDR1eUR5Q242TgoxYmEyK0NrTS9QOXVSUWFlSzVtRWNSWHExY0Y2WU94a0hEWU4rT2JPWmh3VGtoYWdNSncxZXNnekkxMWxuUmdlCjNwZkdjSldzS3lNcjV0ZmdNR3J5MXI2N3NtQ0xpZUMrdlpHTjdnOUZONzdaSU90amdSL0FNQVVYa1NvM3NBY3IKaFllNWY3d1M2T1d0emdGcktTNTBrdDFERGtnV0ROVkhUc3JIeEtaNmlEY3g5UytaYmgwWUF4MHNEVnpHeXFWRApMaFJpdHlVbUlWck9vNE1XUG5PVjVwVmUvdnVKVjFZTzNWZXZRQTdxMnZGU2ZpSjBFSVMwdUZNOU11UzRtWmtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJTzF0YnY0OEF6dms3cDZYaEdVbWRRMzFEQ3N4QkNVCjFPWi9CNStXTVJwczhnNDR4bVBvOXV2dXkvSUY3OW1idkZpR0ROblkwQTh0Nm9YL1lyRXVFeU5JbHBtVzlpZEMKNDJmNzBTR1NWWXltdXdwL0VTQUR0RWxKTXBJajlwaG1DZUNQbXZsbVk4R1lIc2xHM09udkkvUDZkYitLODJEQwp3RnVmSnZ4ZTBXYWJqOVdjOWhrNmRjVUY5NStRd05SZlBGSzdOZEttYmtUVkpGQ0t2MUxOdnNvWVZjQUhENEN4Ci9ySUFLdkdiMzBtYzBVV2FKeGJKeGZNcldySmRtTUkySy9DNXNZRFFjT2laVkpBeWhkVzl1cHRtSmxPaDhaMkwKbVd5V0NjTkhPWHJ3OUdLRHpMS2szMGNnRWxmS1lQRFpBUEQ2RTlhTXB3d2N5QklYU0dKWG8vMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: grafana
  namespace: linkerd-viz
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: 0d5b035f4d141dc2c13e1f89046de78fe0fb1208075734c3977400b866f2db51
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        image: cr.l5d.io/linkerd/metrics-api:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
###
### Grafana
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  grafana.ini: |-
    instance_name = grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus.linkerd-viz.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: grafana
    namespace: linkerd-viz
  name: grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: cr.l5d.io/linkerd/grafana:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: grafana-config
        name: grafana-config
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd-viz']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.19.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 2b75c28c809802ab20332e7d3c9b6014cf05be20118c6bb14dc1cc36dfbd0e89
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRY0MvbGU3eEkwZStmTTU5MlJqRm82ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVdwpPVEE0TkRVeU1Wb1hEVEl5TURVd09UQTRORFV5TVZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1iakpsRW4zeEVLQWJjRHVFZUIrUVVHTXFpaStrZjFNNjlhQmFpWHMzQ0swMWRkNFl1NFhnTkZwV1dqaXdUVwp5YzZja0pMSjVnRWNoSkVocjhzT0FkUVFLNUdkTThRYzBDdk1nanJKL0hzRzBsak0xdG5LVW1pdE4rcHRLTnN0CkRmTFBXNDljdVFSWW1CTE15UWZDbm9PMHF0YWRQQ2R6ZnVDWFZ5cU1aRXdiTlIvMndUUEdvRW1KMExVSExPNEUKUzdxVTVTbXJDSUJucTRPMDAvT2Y0dS9xNlFrTjdqN3F5OEZFN0g0S2ZxSW1oeUhMNFcrTjVCbXJhZDl4SnEvWgpUbFlVclR3ZjByb25hM0ZDcitkbXRhdjBxelNxZUNJWWNEV1dMcVFmaFFiek1pbzZtNVJxSDkwMGpuYmxFLzRkClQxZVdhc2dpSXhCSndsUnVHUjFJUkFFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRnBka0dGZi8xUGNTbG83WlU0ZDJHa1NUbXdqdjE5TDhVQUtCZVAyWXBtK0NyamhiaklqK29TUDlWamUKZ0RJN1luQjdYMW81MWRxRVprNGhVVEg4amhMTUxWdHRyWW01eWo0WUJsQ3MvL2xlMno0Wm9YeE8xZ0RoaUNCMwpXdGRlcUNtT05Zc21OSkFGbm1kRFFsZXRWYVlTbllEZDR6YmhDSGJHbVhWYlBwZGM0eHBxMGg3Um8vUFBsa0hnCmRlakxEWXVaTkFkOTZtVWFXUkV5dEl4d3I2ZWI5aFJQZDFmLzdyTUNMcjdWTU5JU3VtcHV1b1RaMm5SSUYzbWYKa09ieElJTEhWRlJWK1NjbmtYVDF1KzBoK29Fb3Y4UE9mdXNVRURMSHRSUlZPUnFrUjliS1lxK2JrTm9ycjZIVQpJTGVmWWtxaitTZGdqNDhCdU0rdEpxd0NZeWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeHVNbVVTZmZFUW9CdHdPNFI0SDVCUVl5cUtMNlIvVXpyMW9GcUplemNJclRWMTNoCmk3aGVBMFdsWmFPTEJOYkp6cHlRa3NubUFSeUVrU0d2eXc0QjFCQXJrWjB6eEJ6UUs4eUNPc244ZXdiU1dNelcKMmNwU2FLMDM2bTBvMnkwTjhzOWJqMXk1QkZpWUVzekpCOEtlZzdTcTFwMDhKM04rNEpkWEtveGtUQnMxSC9iQgpNOGFnU1luUXRRY3M3Z1JMdXBUbEthc0lnR2VyZzdUVDg1L2k3K3JwQ1EzdVB1ckx3VVRzZmdwK29pYUhJY3ZoCmI0M2tHYXRwMzNFbXI5bE9WaFN0UEIvU3VpZHJjVUt2NTJhMXEvU3JOS3A0SWhod05aWXVwQitGQnZNeUtqcWIKbEdvZjNUU09kdVVUL2gxUFY1WnF5Q0lqRUVuQ1ZHNFpIVWhFQVFJREFRQUJBb0lCQUROeDNoOXY2TXRIZzFvTApwRWNhMzRibEs0VmpZc25xS3d4WWhNNHZMME1WSmNXYml4UFJCTUJqNjN4MjZTYS9TRVFoUzJRc3hVblVUcFliCjJKVDFjcE9mK3lVWFBLU2xyMU1rK3lxcHhKMHVEb3Jac1ZsMGRBeVBnYjhwclQvRVQ2OVc0NkFabytIejZLSTAKUm11emM3MHRwbU1OR05vN2piNGFaM21pQnUrSVJOVUlrRFlyK2ZHc2ZDcEJiYSt2V3VxR0l3N2FrOVl2aVBtZwppeUtickhFL0hyckZHNnVaNjhqNTBCams2OUVJUEgyWGloSzZTYXY4Z1pGYTFFdy9XTC83UDlIek0vZVJCSmFLCi94R1RsUTBCMTd3Q2F6L0JDeVNtYWpYdUQrUW5iOHM0SVFwaGRlZVJ4WjJSUzNTM2xGdm5odEg0dXVUaXZtKzEKdEFXM0FnRUNnWUVBek1ZTlZyUGR1MVFPRm8rT0RLMzNyYWJtSzJCQ1BpWUw3UU12K1NUeTJneTl2NGltL1RFcwo0bE1Kcy9XcGR3KzRPdGZ4cmJjS296eFllTWRuMm4xSkd5UnE0bUsyS3VneWk4bG8raUxKMFZWOTg1ck5yanRFCkVoSk0wK2ZKa21IemhleU9qWlFkMnVTUU9RSlNrdmRROGJuQzBXemE4UjExMndpdEI4SXN3VWtDZ1lFQStLUWgKSnQwNzQrZzN2aWIxa0JyaVMwcmdxRkNETlNPVWF1SDl0eDdLeE12T1UwWWM2Rmd5dnZ0Z0xFbzB2Y2wxdEhZQwpNaDJ2NHlRR3Z4d3l4WUdqMFJyajUrTHBRNkFiV1kreHdlYWtTRDE0OE9YdytiWFdBKzBqcmFydlNuRHdaQk9DCmpVeCtDaDdTeEp5eXZzcVdscFpIRGN2aG84b0hjSjhzSytJQ0pQa0NnWUVBbnNJbDhVUjk4aEJXNDlMa2RKd2oKM0RQN1cwSEQyZDh4ZTgzdTBhQjl6K1AwOEp3SHEyRUd4V2xQcW9BWnBMOUJQQTNUeDdTVHdMNjJjTjFZZlNLSgpIVXY4dWd1QjVINGxRZzhqSGxyK1VSZVJFTjdCL0FUaTM0ZmtuSjJsdjZIRlpkMWpJQXpub0o5MzJWc2RuZWUwCmo5UlBZSUtldERUOC9KWWJZRnFBekZFQ2dZRUFtbXRrNDN3Mis5NTI4RFBHQXMrUGgyOWpnMlV0ZDgwM0dnSnMKemxQalhzR3N6RzhZK1B2OTJEcktpZmMwTmtKdVJidWN0WDlXZzEwV2k0NTV3Y3czNzJBaDl4d24vd1hxdG43Vgp5VFR6QnFLWEFCWHV5VWN6T1pFSHZZNFJ1MHZWSUhJMWZJZnJKMkhwU0k2QlBKa1pXVURQdERQUldTWFo1UW9XCkp0TGd2aEVDZ1lFQXVnZ09mSHhFUTFOWUhrcEN3djdIY3N4ZW45ZEd0clpjTEFmSXl2NzZSNUhJMkkrbTRqcDkKVURwSWhYNkFGWmNiaGRaY3ROTXBacEp4bFhMejgxNEZMSmVpZ3lWRFFoNHlsSytpcG5pbVEzL204OFl2U2swYwppQ3BCc01hVVN6dXFyTVhvTHRkOWhmUzFMb2lXMGtuZXh4WUJTTlQ1WVZXMnp4elAwL3NRK3Y4PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRY0MvbGU3eEkwZStmTTU5MlJqRm82ekFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl4TURVdwpPVEE0TkRVeU1Wb1hEVEl5TURVd09UQTRORFV5TVZvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU1iakpsRW4zeEVLQWJjRHVFZUIrUVVHTXFpaStrZjFNNjlhQmFpWHMzQ0swMWRkNFl1NFhnTkZwV1dqaXdUVwp5YzZja0pMSjVnRWNoSkVocjhzT0FkUVFLNUdkTThRYzBDdk1nanJKL0hzRzBsak0xdG5LVW1pdE4rcHRLTnN0CkRmTFBXNDljdVFSWW1CTE15UWZDbm9PMHF0YWRQQ2R6ZnVDWFZ5cU1aRXdiTlIvMndUUEdvRW1KMExVSExPNEUKUzdxVTVTbXJDSUJucTRPMDAvT2Y0dS9xNlFrTjdqN3F5OEZFN0g0S2ZxSW1oeUhMNFcrTjVCbXJhZDl4SnEvWgpUbFlVclR3ZjByb25hM0ZDcitkbXRhdjBxelNxZUNJWWNEV1dMcVFmaFFiek1pbzZtNVJxSDkwMGpuYmxFLzRkClQxZVdhc2dpSXhCSndsUnVHUjFJUkFFQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBRnBka0dGZi8xUGNTbG83WlU0ZDJHa1NUbXdqdjE5TDhVQUtCZVAyWXBtK0NyamhiaklqK29TUDlWamUKZ0RJN1luQjdYMW81MWRxRVprNGhVVEg4amhMTUxWdHRyWW01eWo0WUJsQ3MvL2xlMno0Wm9YeE8xZ0RoaUNCMwpXdGRlcUNtT05Zc21OSkFGbm1kRFFsZXRWYVlTbllEZDR6YmhDSGJHbVhWYlBwZGM0eHBxMGg3Um8vUFBsa0hnCmRlakxEWXVaTkFkOTZtVWFXUkV5dEl4d3I2ZWI5aFJQZDFmLzdyTUNMcjdWTU5JU3VtcHV1b1RaMm5SSUYzbWYKa09ieElJTEhWRlJWK1NjbmtYVDF1KzBoK29Fb3Y4UE9mdXNVRURMSHRSUlZPUnFrUjliS1lxK2JrTm9ycjZIVQpJTGVmWWtxaitTZGdqNDhCdU0rdEpxd0NZeWs9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: c6f4debda55b25a4fb1719d84530d8a16350a68e39b2666fe4b551e78f8fc465
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - -log-level=info
        image: cr.l5d.io/linkerd/tap:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.10.1
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.10.1
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.10.1
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-controller-api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -viz-namespace=linkerd-viz
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: cr.l5d.io/linkerd/web:stable-2.10.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
